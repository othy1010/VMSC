/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.vmsc.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.vmsc.services.VmscGrammarAccess;

@SuppressWarnings("all")
public class VmscSyntacticSequencer extends AbstractSyntacticSequencer {

	protected VmscGrammarAccess grammarAccess;
	protected AbstractElementAlias match_VFloat_CommaKeyword_6_q;
	protected AbstractElementAlias match_VInt_CommaKeyword_6_q;
	protected AbstractElementAlias match_VPackage_CommaKeyword_7_0_or_RightCurlyBracketKeyword_7_1;
	protected AbstractElementAlias match_VString_CommaKeyword_6_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (VmscGrammarAccess) access;
		match_VFloat_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getVFloatAccess().getCommaKeyword_6());
		match_VInt_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getVIntAccess().getCommaKeyword_6());
		match_VPackage_CommaKeyword_7_0_or_RightCurlyBracketKeyword_7_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVPackageAccess().getCommaKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getVPackageAccess().getRightCurlyBracketKeyword_7_1()));
		match_VString_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getVStringAccess().getCommaKeyword_6());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_VFloat_CommaKeyword_6_q.equals(syntax))
				emit_VFloat_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VInt_CommaKeyword_6_q.equals(syntax))
				emit_VInt_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VPackage_CommaKeyword_7_0_or_RightCurlyBracketKeyword_7_1.equals(syntax))
				emit_VPackage_CommaKeyword_7_0_or_RightCurlyBracketKeyword_7_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VString_CommaKeyword_6_q.equals(syntax))
				emit_VString_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     VContent=EFloat (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_VFloat_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     VContent=EInt (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_VInt_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ',' | '}'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString (ambiguity) 'VPrefix' ':' VPrefix=EString
	 
	 * </pre>
	 */
	protected void emit_VPackage_CommaKeyword_7_0_or_RightCurlyBracketKeyword_7_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     VContent=EString (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_VString_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
