/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.vmsc.formatting2;

import Vmsc.VClass;
import Vmsc.VPackage;
import Vmsc.VStructuralComponent;
import Vmsc.VStructuralFeatures;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.vmsc.services.VmscGrammarAccess;

@SuppressWarnings("all")
public class VmscFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private VmscGrammarAccess _vmscGrammarAccess;

  protected void _format(final VPackage vPackage, @Extension final IFormattableDocument document) {
    EList<VStructuralComponent> _vComponents = vPackage.getVComponents();
    for (final VStructuralComponent vStructuralComponent : _vComponents) {
      document.<VStructuralComponent>format(vStructuralComponent);
    }
  }

  protected void _format(final VClass vClass, @Extension final IFormattableDocument document) {
    EList<VStructuralFeatures> _vStructural_features = vClass.getVStructural_features();
    for (final VStructuralFeatures vStructuralFeatures : _vStructural_features) {
      document.<VStructuralFeatures>format(vStructuralFeatures);
    }
  }

  public void format(final Object vClass, final IFormattableDocument document) {
    if (vClass instanceof VClass) {
      _format((VClass)vClass, document);
      return;
    } else if (vClass instanceof VPackage) {
      _format((VPackage)vClass, document);
      return;
    } else if (vClass instanceof XtextResource) {
      _format((XtextResource)vClass, document);
      return;
    } else if (vClass instanceof EObject) {
      _format((EObject)vClass, document);
      return;
    } else if (vClass == null) {
      _format((Void)null, document);
      return;
    } else if (vClass != null) {
      _format(vClass, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(vClass, document).toString());
    }
  }
}
